{
	"info": {
		"_postman_id": "de860ca8-8213-4c20-97cc-188515173920",
		"name": "Numbers API",
		"description": "[http://numbersapi.com/#42](http://numbersapi.com/#42)\n\nThe responses here are in plain text or HTML, instead of JSON.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41957911"
	},
	"item": [
		{
			"name": "Random Number Trivia",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200 OK\", pm.response.to.have.status(200))",
							"pm.test(\"Response is plain text\", pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\"))",
							"pm.test(\"Response is correct\", function(){",
							"    let textData = pm.response.text().split(\" \")",
							"    pm.expect(parseInt(textData[0])).to.not.be.NaN//It's important to use NaN instead of \"number\", because NaN is a type of number.",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/:number/:type",
					"host": [
						"{{base_url}}"
					],
					"path": [
						":number",
						":type"
					],
					"variable": [
						{
							"key": "number",
							"value": "random",
							"description": "An integer, or the keyword \"random\"."
						},
						{
							"key": "type",
							"value": "trivia",
							"description": "Defaults to \"trivia\" if omitted. Can be \"trivia\", \"math\", \"date\" or \"year\". "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Random Number Math",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200 OK\", pm.response.to.have.status(200))",
							"pm.test(\"Response is plain text\", pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\"))",
							"pm.test(\"Response is correct\", function(){",
							"    let textData = pm.response.text().split(\" \")",
							"    pm.expect(parseInt(textData[0])).to.not.be.NaN//It's important to use NaN instead of \"number\", because NaN is a type of number.",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/:number/:type",
					"host": [
						"{{base_url}}"
					],
					"path": [
						":number",
						":type"
					],
					"variable": [
						{
							"key": "number",
							"value": "random",
							"description": "An integer, or the keyword \"random\"."
						},
						{
							"key": "type",
							"value": "math",
							"description": "Defaults to \"trivia\" if omitted. Can be \"trivia\", \"math\", \"date\" or \"year\". "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Random Number Year",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200 OK\", pm.response.to.have.status(200))",
							"pm.test(\"Response is plain text\", pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\"))",
							"pm.test(\"Response is correct\", function(){",
							"    let textData = pm.response.text().split(\" \")",
							"    pm.expect(parseInt(textData[0])).to.not.be.NaN//It's important to use NaN instead of \"number\", because NaN is a type of number.",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/:number/:type",
					"host": [
						"{{base_url}}"
					],
					"path": [
						":number",
						":type"
					],
					"variable": [
						{
							"key": "number",
							"value": "random",
							"description": "An integer, or the keyword \"random\"."
						},
						{
							"key": "type",
							"value": "year",
							"description": "Defaults to \"trivia\" if omitted. Can be \"trivia\", \"math\", \"date\" or \"year\". "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Random Number Date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200 OK\", pm.response.to.have.status(200))",
							"pm.test(\"Response is plain text\", pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\"))",
							"pm.test(\"Response is correct\", function(){",
							"    let textData = pm.response.text().split(\" \")",
							"    pm.expect(parseInt(textData[0])).to.be.NaN",
							"    pm.expect(parseInt(textData[1])).to.not.be.NaN",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/:number/:type",
					"host": [
						"{{base_url}}"
					],
					"path": [
						":number",
						":type"
					],
					"variable": [
						{
							"key": "number",
							"value": "random",
							"description": "An integer, or the keyword \"random\"."
						},
						{
							"key": "type",
							"value": "date",
							"description": "Defaults to \"trivia\" if omitted. Can be \"trivia\", \"math\", \"date\" or \"year\". "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Multiple Numbers Trivia",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200 OK\", pm.response.to.have.status(200))",
							"pm.test(\"Response is HTML\", pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\"))",
							"pm.test(\"Response is correct\", function(){",
							"    //1st, we get the numbers from the path variable",
							"    let urlString = pm.request.url.toString().split(\"/\")",
							"    let urlNumbers = urlString[urlString.length - 1].split(\",\").map(Number).sort((a, b) => a - b)",
							"    //2nd, we get the numbers from the HTML response",
							"    let jsonData = JSON.parse(pm.response.text())//The HTML response is valid JSON, so we can parse it.",
							"    let responseNumbers = Object.keys(jsonData).map(Number)//Each path variable is a key name in the JSON response.",
							"    console.log(urlNumbers)",
							"    console.log(responseNumbers)",
							"",
							"    pm.expect(urlNumbers.length).to.equal(responseNumbers.length)",
							"    for (let i = 0; i < responseNumbers.length; i++) {",
							"        pm.expect(urlNumbers[i]).to.equal(responseNumbers[i])",
							"    }",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/:number",
					"host": [
						"{{base_url}}"
					],
					"path": [
						":number"
					],
					"variable": [
						{
							"key": "number",
							"value": "1,3,6,345,76,34534,098",
							"description": "An integer, or the keyword \"random\"."
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Random Number Trivia within Range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200 OK\", pm.response.to.have.status(200))",
							"pm.test(\"Response is plain text\", pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\"))",
							"pm.test(\"Response is correct\", function(){",
							"    let textData = pm.response.text().split(\" \")",
							"    let number = parseInt(textData[0])",
							"    let min = parseInt(pm.request.url.query.get(\"min\"))",
							"    let max = parseInt(pm.request.url.query.get(\"max\"))",
							"    pm.expect(number).to.be.greaterThanOrEqual(min).and.lessThanOrEqual(max)",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/:number?min=5&max=25",
					"host": [
						"{{base_url}}"
					],
					"path": [
						":number"
					],
					"query": [
						{
							"key": "min",
							"value": "5"
						},
						{
							"key": "max",
							"value": "25"
						}
					],
					"variable": [
						{
							"key": "number",
							"value": "random",
							"description": "An integer, or the keyword \"random\"."
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://numbersapi.com",
			"type": "string"
		}
	]
}